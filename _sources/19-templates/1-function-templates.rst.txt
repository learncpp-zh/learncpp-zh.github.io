第十九章第一节 函数模板
=======================

原文作者：Alex

首次发布：2008 年 4 月 18 日

最近更新：2020 年 12 月 21 日

译者：Karl Liu

翻译时间：2021 年 2 月 13 日

原文链接：https://www.learncpp.com/cpp-tutorial/function-templates/


为什么需要函数模板
------------------

在之前的章节中，你已经学习过如何写一些可以让程序更好写、更安全和更可维护的函数和类。即便函数和类功能强大并且灵活性很强，在特定情况下他们还是会有一定限制，因为 C++ 要求你指定所有参数的类型。

举个例子，假设你想要写一个判断两数中的最大值的函数，你可能会这么写：

.. code-block:: C++
    :linenos:

    int max(int x, int y)
    {
        return (x > y) ? x : y;
    }

这个函数可以完美工作——对 ``int`` 型变量来说。如果之后你想让这个函数同时可以用于 ``double`` 类型会怎样呢？传统做法是重载这个 max() 函数，写一个可以接收浮点数的版本：

.. code-block:: C++
    :linenos:

    double max(double x, double y)
    {
        return (x > y) ? x : y;
    }

请注意这里 ``double`` 版本 ``max()`` 的代码和 ``int`` 版本是完全一样的！事实上，这个实现对于任何类型都是可用的：``char``、``int``、``double``，并且如果你重载了 ``operator >``，甚至对各种类都可用！然而，因为 C++ 要求你指定变量的类型，所以对于每个你想用的类型，你都不得不写一个重载。

不得不给同一个函数写很多的重载实在非常头疼且浪费时间，同时这也违背了要尽可能减少重复代码这一编程准则。如果可以写一个可以接受“任何”类型的参数的 ``max()`` 是不是会很香？

欢迎来到模板的世界。


什么是函数模板？
----------------

如果你在字典里查“模板”这个词，你会找到一个类似于这个的定义（译注：这里的定义指的是英英词典中 template 的定义）：“模板是一个提供了用来构造相似的物体的模式的模型”。一种非常容易理解的模板是“版面模子”。版面模子是一个物体（比如一个纸板），它里面会被镂空出一个形状来（比如 J 形）。之后将这个版面模子放在另一个物体上，并向镂空的洞里喷漆，你就可以非常快捷地生产很多不同颜色的这个形状的图案。需要注意的是你只需要制作一个版面模子，想用几次就可以用几次，来构造任何颜色的图案。更棒的是，你不需要在制作这个版面模子的时候想好你要用构造什么颜色的图案，你可以在真正构造图案的时候再决定。

在 C++ 中，\ **函数模板** 就是提供了用来构造相似的函数的模式的函数。函数模板中最基本的思想就是你可以创造一个不需要指定确切参数类型的函数。取而代之，我们会在定义函数的时候用一些被叫做 **模板类型参数** 的占位类型。一旦我们构造了这样一个使用占位类型的函数，我们就相当于构造了一个“函数版面模子”。

当你调用一个模板函数的时候，编译器会构造一个模板的拷贝，再将占位类型替换为函数调用中真正传入的变量类型！使用这个方法，编译器可以从一个模板中构造出很多重载。我们会在下一节中讨论这个过程的细节。


在 C++ 中构造模板函数
---------------------

这时你可能在好奇如何真正地在 C++ 中构造出函数模板。实际上这并不是那么难。

我们重新回到 ``int`` 版本的 ``max()``：

.. code-block:: C++
    :linenos:

    int max(int x, int y)
    {
        return (x > y) ? x : y;
    }

注意到这里有三个用到了指定的类型的地方：参数 x、参数 y、以及函数的返回值都必须是整型变量。为了构造一个函数模板，我们将要把这些制定的类型替换为占位类型。这个例子中，因为我们只需要替换一种类型（``int``），我们只需要一个模板类型参数。

你想怎么命名你的占位类型都可以（译注：不过显然，最好别用中文），只要这不是一个保留字。然而，在 C++ 中，我们通常将其命名为 ``T`` （“类型（Type）”一词的缩写）。

这里是使用占位类型的新函数：

.. code-block:: C++
    :linenos:

    T max(T x, T y)
    {
        return (x > y) ? x : y;
    }

这是个良好的开始——然而，它并不能通过编译，因为编译器不知道 ``T`` 是个什么玩意！

为了让这个函数可以工作，我们需要告诉编译器两件事情：首先，这是个模板声明；其次， ``T`` 是一个占位类型。我们可以在一行里同时做到这两件事，使用一个叫做 **模板参数声明** 的东西：

.. code-block:: C++
    :linenos:

    template <typename T>  // 这个就是模板参数声明
    T max(T x, T y)
    {
        return (x > y) ? x : y;
    }

不管你信不信，这就是我们所需要的所有东西。这个函数能通过编译了！

接下来，我们稍微靠近点看看模板参数声明。我们从关键字 ``template`` 开始——它告诉编译器这个东西后面将要出现一个模板参数列表。我们把所有的参数放到尖括号（<>）里面。要构造一个模板类型参数，从 ``typename`` 和 ``class`` 两个关键字中任选一个。在这个场景下两个关键字没有任何区别，所以用哪个取决于你。需要注意的事即便你这里用的是 ``class``，传入的类型也不必须是一个类（可以使一个基础类型，一个指针，或者任何匹配的东西）。最后命名你的类型（通常是 ``T``）。

如果一个模板函数有多个模板类型变量，他们之间可以用逗号隔开：

.. code-block:: C++
    :linenos:

    template <typename T1, typename T2>
    // 后面是模板函数

最后一个提醒：因为传进来的参数可能是个类，并且通常按值传一个类不是个好主意，你可以让我们的模板函数的参数和返回类型返回常引用：

.. code-block:: C++
    :linenos:

    template <typename T>
    const T& max(const T& x, const T& y)
    {
        return (x > y) ? x : y;
    }


使用函数模板
------------

使用一个函数模板非常直白——你可以把它当作任何其他的函数一样用。这里是一个使用了我们的函数模板的完整的程序：

.. code-block:: C++
    :linenos:

    #include <iostream>
 
    template <typename T>
    const T& max(const T& x, const T& y)
    {
        return (x > y) ? x : y;
    }
    
    int main()
    {
        int i = max(3, 7);  // 返回 7
        std::cout << i << '\n';
    
        double d = max(6.34, 18.523);  // 返回 18.523
        std::cout << d << '\n';
    
        char ch = max('a', '6');  // 返回 'a'
        std::cout << ch << '\n';
    
        return 0;
    }

这个程序会打印：

.. code-block:: Text

    7
    18.523
    a


请注意这三个对 ``max()`` 的调用使用了不同的参数类型！因为我们用三种不同的类型调用了这个函数，编译器会根据模板的定义创建这个函数的三个不同版本：一个接受 ``int`` 参数（被称作 ``max<int>``），一个接受 ``double`` 参数（被称作 ``max<double>``），一个接受 ``char`` 参数（被称作 ``max<char>``）。

请注意你不需要在函数名称里显式指出模板类型（比如 ``max<int>`` 中 ``<int>`` 这部分），因为编译器可以根据参数类型推导出来。


总结
----

如你所见，模板函数可以节约很多时间，因为你只需要写一个函数就可以应用于很多不同的类型上。一旦你熟悉如何写函数模板，你就会发现他们并不会比普通函数更费时。模板函数降低了代码的维护开销，因为重复的代码显著地减少了。最后，模板函数可以更安全，因为你不需要在需要用到接受某个类型的函数时手动复制一个。

模板函数也有一些缺点，如果我们不提一下的话可能会被忽略。首先，一些老旧编译器并不能很好地支持模板。然而这个缺点现在已经不太算得上一个缺点了。其次，模板函数可能会产生一堆看起来非常离谱的编译错误，相比普通函数的错误来说可能更难解码（译注：没错是“解码”不是“理解”，你可以意会一下是什么水平的复杂度）（我们会在下一节中看到一个例子）。最后，模板函数会增加编译时间和代码体积，因为一个模板可能会被实现并编译成很多文件（有一些替代方案可以绕过这个问题）。

无论如何，这些短板相比模板给你的编程工具带来的威力和灵活性相比实在是不足一提。

注：标准库里已经包括了一个模板的 ``max()`` 函数，在 ``algorithm`` 头文件里，所以你不需要自己写一个（除非你想）。如果你一定要自己写，如果你使用了 ``using namespace std;`` 这个语句的话，请小心和标准库中的 ``max()`` 的命名冲突，编译器可不知道你想调用自己的 ``max()`` 还是 ``std::max()``。

在这一张的剩余部分，我们会继续探索模板这一主题。
