第十九章第一节 函数模板
=======================

原文作者：Alex

首次发布：2008 年 4 月 18 日

最近更新：2020 年 12 月 21 日

译者：Karl Liu

翻译时间：2021 年 2 月 9 日

原文链接：https://www.learncpp.com/cpp-tutorial/function-templates/


为什么需要函数模板
------------------

在之前的章节中，你已经学习过如何写一些可以让程序更好写、更安全和更可维护的函数和类。即便函数和类功能强大并且灵活性很强，在特定情况下他们还是会有一定限制，因为 C++ 要求你指定所有参数的类型。

举个例子，假设你想要写一个判断两数中的最大值的函数，你可能会这么写：

.. code-block:: C++
    :linenos:

    int max(int x, int y)
    {
        return (x > y) ? x : y;
    }

这个函数可以完美工作——对 ``int`` 型变量来说。如果之后你想让这个函数同时可以用于 ``double`` 类型会怎样呢？传统做法是重载这个 max() 函数，写一个可以接收浮点数的版本：

.. code-block:: C++
    :linenos:

    double max(double x, double y)
    {
        return (x > y) ? x : y;
    }

请注意这里 ``double`` 版本 max() 的代码和 ``int`` 版本是完全一样的！事实上，这个实现对于任何类型都是可用的：``char``、``int``、``double``，并且如果你重载了 ``operator >``，甚至对各种类都可用！然而，因为 C++ 要求你指定变量的类型，所以对于每个你想用的类型，你都不得不写一个重载。
