第零章第二节 C/C++ 简介
=======================

原文作者：Alex

首次发布：2007 年 5 月 27 日

最近更新：2020 年 4 月 17 日

译者：Karl Liu

翻译时间：2021 年 2 月 1 日

原文链接：https://www.learncpp.com/cpp-tutorial/introduction-to-cplusplus/


在 C++ 之前我们已经有了 C 语言
------------------------------

Dennis Ritchie 于 1972 年在贝尔实验室发明了 C 语言，它主要是一个用来编写操作系统的语言。Ritchie 当时的主要目标是创建一个容易编译的、可以高效访问内存的、性能良好的、独立的（不依赖其他程序的）、简约的语言。作为一个高级语言，它在设计的时候希望给予程序员很多控制权的同时能够实现与平台（硬件和操作系统）独立（也就是说，为了运行在不同的平台上，代码不需要被重写）。

C 语言在 1973 年的时候已经成为了一个非常灵活且高效的语言，Ritchie 和 Ken Thompson 用 C 语言重写了大部分的 Unix 操作系统。那之前的很多操作系统都是用汇编语言编写的。和汇编只能被翻译成平台专属的机器码不同，C 语言有着出色的可移植性，可以让 Unix 轻易地在各种平台上编译，并在这些平台上被采用。C 和 Unix 的未来就这样被绑定在一起。C 语言之所以这么受欢迎，一部分原因就是由于 Unix 的成功。

在 1978 年，Brian Kernighan 和 Dennis Ritchie 发表了一本叫做《C 编程语言（The C Programming Language）》的书。这本书通常被叫做 K&R（作者的姓氏首字母），为这门语言提供了一个非正式的规范，这个规范也成为了一个事实上的标准。当可移植性非常重要的时候，程序员会完完全全按照 K&R 的规范进行编程，因为当时大部分的编译器都是按照 K&R 标准实现的。

1983 年，美国国家标准学会（ANSI）组建了一个委员会，用以建立 C 语言的正式标准。1989 年（委员会干什么都慢吞吞的），它们终于搞定了，并且发布了 C89 标准，更多地，我们称之为 ANSI C。1990 年，国际标准化组织（ISO）采纳了 ANSI C（虽然进行了一点点小修改）。这个版本的标准被称为 C90。编译器们最终变得符合 ANSI C 或 C90 标准，任何重视可移植性的程序都要根据这个标准编写。

1999 年，ANSI 委员会发布了一个新的 C 语言版本，称作 C99。C99 采纳了很多已经成为编译器拓展，或已经在 C++ 中被实现了的特性。


C++
---

1979 年，Bjarne Stroustrup 开始在贝尔实验室开始开发作为 C 语言拓展的 C++（读作西加加）。C++ 为 C 语言添加了很多特性，所以它被认为是 C 语言的超集，但实际上这个观点并不完全正确（因为 C99 添加了一些 C++ 没有的特性）。C++ 之所以名声鹊起，主要是因为它是门面向对象的语言。至于什么是对象，它和传统的编程方法有什么区别，emmm，我们会在第八章（面向对象编程基础）讲到。

C++ 在 1998 年被 ISO 委员会标准化（这表示 ISO 委员会批准了一份描述 C++ 语言的文件，用于确保所有的编译器都坚持使用同一个标准）。在 2003 年发布了一个小更新（叫做 C++03）。

那之后 C++ 又有三个大更新（C++11、C++14 和 C++ 17，分别在 2011 年、2014 年和 2017 年被批准），其中每一个都给 C++ 带来了新的功能。尤其是 C++11，添加了大量的新能力，所以这个版本也被认为是 C++ 的一个新开始。在本文写作时，委员会已经在起草 C++20 了，并承诺将带来比 C++11 还要多的新特性。

编程语言的每个新的正式更新都被称作一个 **语言标准**\ （或者 **语言规范**\ ）。标准是通过它所发布的年份命名的。举例来说，没有 C++15，因为 2015 年没有任何新标准。


C 和 C++ 的哲学
---------------

C 和 C++ 底层的设计哲学可以被归纳为“相信程序员”——虽然很棒，但是也很危险。C++ 在设计的时候为程序员保留了很高的自由度，因此程序员可以为所欲为。然而这也意味着即便有时候你做的事情完全没有道理，语言也不会组织你，因为它假设你有一些它理解不了的理由。对于新手来说，一不注意就会掉入一些陷阱里，这些陷阱还挺多。这也是为什么在 C/C++ 里面知道什么不该做和什么该做几乎同等重要。

.. topic:: 问：C++ 擅长做什么？

    C++ 最擅长高性能或对内存或者其他资源有着精确控制需求的场景。以下种类的应用是典型的适合使用 C++ 的例子：

    * 电子游戏
    * 实时系统（比如运输、制造等等）
    * 高性能理财应用（比如高频交易）
    * 图形化应用和模拟
    * 生产力或办公应用
    * 嵌入式软件
    * 音视频处理

.. topic:: 问：在进入本教程前我需要先掌握 C 语言吗？

    不！直接从 C++ 开始完全没有问题，而且我们在过程中会教你你需要知道的所有东西（包括一些需要避免的陷阱）。

    一旦你了解了 C++，如果你需要的话，再去学标准 C 语言应该会易如反掌。现在 C 语言的应用范围很狭窄：嵌入式设备上运行的程序，或者与只提供 C 语言接口的程序交互等等。大多数情况下还是推荐你使用 C++。